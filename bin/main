#!/usr/bin/env node

var Q       = require('q');
var fs      = require('fs');
var path    = require('path');

var tmpFile = Q.nfbind(require('tmp').tmpName);
var exec    = Q.nfbind(require('child_process').exec);
var moment  = require('moment');
var Dropbox = require('dropbox');

var config;

var configFilePath = path.join(process.env.HOME, '/.ss-to-db.config');
var dropboxEncodedKey = 'sHgQ+vI0EGA=|jKhIZQGOPu6NUhLQ//7Har0smbRLFn2p6OEU7RyiBQ==';

var dbClient = new Dropbox.Client({
    key: dropboxEncodedKey, sandbox: false
});

//load configuration
try{
  config = JSON.parse(fs.readFileSync(configFilePath).toString());
  dbClient = new Dropbox.Client({
    key:         dropboxEncodedKey,
    token:       config.token,
    tokenSecret: config.tokenSecret,
    sandbox:     true
  });

} catch(er) {

  console.log('We need to get an access token for the first time.');
  console.log('The token will be saved locally in your machine and not shared with anyone.');

  delete process.env.BROWSER;

  return setTimeout(function () {
    dbClient.authDriver(new Dropbox.Drivers.NodeServer({port: 8191}));
    
    return dbClient.authenticate(function (err, client) {
      if (err || !client) return process.exit(0);
      fs.writeFileSync(configFilePath, JSON.stringify({
        token:       client.oauth.token,
        tokenSecret: client.oauth.tokenSecret
      }));
      process.exit(0);
    });

  }, 2500);

}

var file = 'ss-' + moment().format('YYYY-MM-DDTHH-mm-ss') + '.png';

exec('screencapture -i /tmp/' + file)
  .thenResolve(file)
  .then(function (file) {
    return Q.ninvoke(dbClient, 'writeFile',  file, fs.readFileSync('/tmp/' + file))
      .then(function (stats) {
        fs.unlinkSync('/tmp/' + file);
      }).thenResolve(file);
  })
  .then(function (file){
    return Q.ninvoke(dbClient, 'makeUrl', file, {downloadHack: true})
      .then(function (link) {
        return exec('echo "' + link.url  + '" | pbcopy');
      }).thenResolve(file);
  })
  .then(null, function (err) {
    console.log(err);
  });